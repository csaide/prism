// (c) Copyright 2022 Christian Saide
// SPDX-License-Identifier: GPL-3.0-or-later

syntax = "proto3";

package raft;

message Command {
    bytes term = 1;
    bytes data = 2;
}

message ClusterConfig {
    bytes term = 1;
    repeated string voters = 2;
    repeated string replicas = 3;
}

message Entry {
    oneof payload {
        Command command = 1;
        ClusterConfig config = 3;
    }
}

// Describes a request represents either a heartbeat from the cluster leader, or a set of entires to
// append to the recipients log.
message AppendRequest {
    bytes term = 1;
    string leader_id = 2;
    bytes leader_commit_idx = 3;
    bytes prev_log_idx = 4;
    bytes prev_log_term = 5;
    repeated Entry entries = 6;
}

// Describes the response to the append request, and whether or not it was successful.
message AppendResponse {
    bytes term = 1;
    bool success = 2;
}

// Describes a request from a cluster member attempting to declare itself the cluster leader.
message VoteRequest {
    bytes term = 1;
    string candidate_id = 2;
    bytes last_log_idx = 3;
    bytes last_log_term = 4;
}

// Describes the response to the vote request from the candidate and whether or not the local member,
// granted its vote to said candidate.
message VoteResponse {
    bytes term = 1;
    bool vote_granted = 2;
}

/// Describes the request to add a given member to the cluster.
message AddRequest {
    string member = 1;
}

/// Describes the response to adding a server to the cluster.
message AddResponse {
    string status = 1;
    string leader_hint = 2;
}

/// Describes the request to remove a given member from the cluster.
message RemoveRequest {
    string member = 1;
}

/// Describes the response to removing a server from the cluster.
message RemoveResponse {
    string status = 1;
    string leader_hint = 2;
}

// The [RaftService] exposes raft concensus algorithm RPC's.
service RaftService {
    // AppendEntries implements the heartbeat and log replication algorithms from the raft protocol.
    rpc AppendEntries (AppendRequest) returns (AppendResponse);

    // RequestVote implements the voting algorithm from the raft protocol.
    rpc RequestVote (VoteRequest) returns (VoteResponse);

    /// AddServer implements the cluseter add member algorithm from the raft protocol.
    rpc AddServer (AddRequest) returns (AddResponse);

    /// RemoveServer implements the cluster remove member algorithm from the raft protocol.
    rpc RemoveServer(RemoveRequest) returns (RemoveResponse);
}
